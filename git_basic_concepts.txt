GIT - Basic Concepts

VERSION CONTROL SYSTEM

Version control system (VCS) is a software that helps software developers to work together and maintain a complete history of their work.
Listed below are the functions of a VCS:
	-Allows developers to work simultaneously.
	-Does not allow overwritting each other's changes.
	-Maintains a history of every version.

Following are the types of VCS:
	-Centralized version control system (CVCS).
	-Distributed/Decentralized version control system (DVCS).

In this chapter, we will concentrate only on distributed version control system and especially on Git. Git falls under distributed version control system.

DISTRIBUTED VERSION CONTROL SYSTEM

Centralized version control system (CVCS) uses a central server to store all files and enables team collaboration. But the major drawback of CVCS is it single point of failure, i.e., faiure of the central server. Unfortunately, if the central server goes down for an hour, then during that hour, no one can collaborate at all. And even in a worst case, if the disk of the central server gets corrupt and proper backup has not been taken, then you will lose the entire history of the project. Here, distributed version control system (DVCS) comes into picture.

DVCS clients not only check out the latest snapshot of the directory but they also fully mirror the repository. If the server goes down, then the repository from any client can be copied back to the server to restore it. Every checkout is a full backup of the repository. Git does not rely on the cetral server and that is why you can perform many operations when you are offline. You can commit changes. create branches, view logs, and perform other operations when you are offline. You require network connection only to publish your changes and take the latest changes.

ADVANTAGES OF GIT

FREE AND OPEN SOURCE
Git is released under GPL's open source license. It is available freely over the internet. You can use GIt to manage property projects without paying a single penny. As it is an open source, you can download its source code and also perform changes according to you requirements.

FAST AND SMALL
As most of the operations are performed locally, it gives a huge benefit in terms of speed. Git does not rely on the central server; that is why, there is no need to interact with the remote server for wvery operation. The core part of Git is written in C, which avoids runtime overheads associated with other high-level languages. Though Git mirros entire repository, the size of the data on the client side is small. This illustrates the efficiency of Git at compressing and storing data on the client side.

IMPLICIT BACKUP


---------------
BRANCHES
Branches are used to create another line of development. By default, Git has a master branch, which is same as trunk in Subversion. Usually, a branch is created to work on a new feature. Once the feature is completed, it is merged back with the master branch and we delete the branch. Every banch is referenced by HEAD, which points to the latest commit in branch. Whenever you make a commit, HEAD is updated with latest commit.

TAGS
Tag assigns a meaningful name with a specific version in the repository. Tags are very similar to branches, but the difference is that tags are immutable. It means, tag is a branch, which nobody intends to modify. Once a tag is created for a perticular commit, even if you create a new commit, it not be updated. Usually, developers create tags for product releases.


